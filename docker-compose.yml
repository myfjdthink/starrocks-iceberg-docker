version: '3.9'
services:

  minio:
    hostname: minio
    image: 'minio/minio'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./data/minio:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: server /data --console-address ":9001"
    networks:
      - ndsnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
    networks:
      - ndsnet
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0;
      "
    depends_on:
      minio:
        condition: service_healthy

  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=ngods
      - POSTGRES_USER=ngods
      - POSTGRES_DB=ngods
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - '5432:5432'
    volumes:
      - ./data/postgres:/var/lib/postgresql/data/pgdata
    networks:
      - ndsnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ngods"]
      interval: 5s
      timeout: 5s
      retries: 5

  metastore:
    build: metastore/
    container_name: metastore
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
    ports:
      - '9083:9083' # Metastore thrift
    networks:
      ndsnet:
        aliases:
          - metastore
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
  trino:
    image: trinodb/trino:408
    container_name: trino
    volumes:
      - ./trino/catalog:/etc/trino/catalog
    ports:
      - '8060:8080'
    networks:
      ndsnet:
        aliases:
          - trino
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
networks:
  ndsnet:
    name: ndsnet
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.80.0/16
